
1st Note
"""
Website: Bricklink.com. 

Specifically, the following two 'catalogues' of the website with all the data:
https://www.bricklink.com/catalogTree.asp?itemType=S
https://www.bricklink.com/catalogTree.asp?itemType=M
"""

The PowerPoint shows what needs to be collected. It will all need to connect in a SQLite database. I believe there would be a table for 'sets', 'minifigures', and 'parts'.
These tables would hold data specific to each. There would also be tables that connect the three (sets_minifigures, sets_parts, minifigures_parts). 
This would look like a typical 3rd normal form database. (search "3rd normal form") if you've never heard of that.

This isn't a trivial project, so please look into it closely and ensure that it can be done before saying that you can do it.


2nd Note:

The client is ready to move forward. One thing that we've added: 
- images downloaded to an 'images' folder
- image file location added to data (./images/filename.jpg)
- full URL to image online




3rd Note
The client has just accepted my offer. Please go ahead and send yours.

A few notes:
- The code will be handed over to the client, so it needs to be     clean and well-organized
- The data should be sent to a SQLite database as it scrapes, not output to CSV files
- This doesn't need to be fast. Slow and clean is better than quick and complex
- The output files should be Excel files
- In the past, we have run into problems by waiting until the end of the project to review, so we need to work through this step by step. Check-ins each day or two, 
rather than a delivery on the last day
- I can help if you get stuck. I would rather work WITH you to build this than have a poor outcome


4th Note
Sorry for the delay. I am traveling until Tuesday and don’t have my computer, so a whiteboard will have to suffice.

Here we have 3 data tables and a connection table.

The connection table will let us connect all the data for any sql queries we need for the output. Each set/minifigure/part has its own id on the site,
we can use that as the set_id/part_id/minifigure_id.

It will tell us the following:
- every minifigure in a set
- every set that contains a specific minifigure
- every part in a set or minifigure

Since we will have pricing info the customer will be able to use this information to get the cheapest set that has a part or minifigure he needs.


5th Note
sales_6mo_used_timessold
sales_6mo_used_totalqty
sales_6mo_used_pricemin

You can use that for the naming convention .

Putting it in a separate table would be fine as well. A pricing table maybe? As long as it has the unique identifying part/set number. 
So we can connect it back together at the end.

6th Note:

Also, I would put items like that in their own function. We could pass it html, and then return a dict or write it to the db in the function.

The functions will be much easier to work with in the future if they’re more modular and broken up into smaller sections.